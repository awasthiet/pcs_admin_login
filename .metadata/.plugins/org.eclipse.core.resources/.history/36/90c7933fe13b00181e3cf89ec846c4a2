package utility;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.apache.commons.io.FileUtils;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
public class ExcelUtils {

	private static XSSFSheet ExcelWSheet;
	private static XSSFWorkbook ExcelWBook;
	private static XSSFCell Cell,cell1,cell2;
	private static XSSFRow Row;

	public static void setExcelFile(String Path,String SheetName) throws Exception {

		// Open the Excel file
		FileInputStream ExcelFile = new FileInputStream(Path);
		// Access the required test data sheet
		ExcelWBook = new XSSFWorkbook(ExcelFile);
		ExcelWSheet = ExcelWBook.getSheet(SheetName);
	}

	@SuppressWarnings("static-access")
	public static void setCellData(String TestData,int RowNum, int ColNum, String... Result) throws Exception    {
		Row  = ExcelWSheet.getRow(RowNum);
		if(Row==null)
			Row=ExcelWSheet.createRow(RowNum);
		else
			Row  = ExcelWSheet.getRow(RowNum);
		//		System.out.println(Row+"================");
		int len = Result.length;
		//		System.out.println(len);
		for (int i = 0; i < len; i++) {
			Cell = Row.getCell(ColNum+i,Row.RETURN_BLANK_AS_NULL);
			//			System.out.println(Cell);

			if (Cell == null) {
				Cell = Row.createCell(ColNum+i);
				Cell.setCellValue(Result[i]);
			}
			else
			{
				Cell.setCellValue(Result[i]);
			}
		}
		// Constant variables Test Data path and Test Data file name
		FileOutputStream fileOut = new FileOutputStream(Constant.Path + TestData);
		ExcelWBook.write(fileOut);
		//			fileOut.flush();
		//			fileOut.close();
	}
	
	public static void setCellDatafor(String TestData,int RowNum, int ColNum, String... Result) throws Exception    {
		Row  = ExcelWSheet.getRow(RowNum);
		if(Row==null)
			Row=ExcelWSheet.createRow(RowNum);
		else
			Row  = ExcelWSheet.getRow(RowNum);
		//		System.out.println(Row+"================");
		int len = Result.length;
		//		System.out.println(len);
		for (int i = 0; i < len; i++) {
			Cell = Row.getCell(ColNum+i,Row.RETURN_BLANK_AS_NULL);
			//			System.out.println(Cell);

			if (Cell == null) {
				Cell = Row.createCell(ColNum+i);
				Cell.setCellValue(Result[i]);
			}
			else
			{
				Cell.setCellValue(Result[i]);
			}
		}
		// Constant variables Test Data path and Test Data file name
	//	FileOutputStream fileOut = new FileOutputStream(Constant.Path + TestData);
		FileOutputStream fileOut = new FileOutputStream(TestData);
		ExcelWBook.write(fileOut);
		//			fileOut.flush();
		//			fileOut.close();
	}

	public static void setCellDataInLoop(String TestData,int RowNum, int ColNum,String[] linktext,String[] linkURL, String[] Result) throws Exception
	{	
		for (int i = RowNum; i <= Result.length; i++)
		{
			Row  = ExcelWSheet.getRow(i);
			if(Row==null)
				Row=ExcelWSheet.createRow(i);
			else
				Row  = ExcelWSheet.getRow(i);


			Cell = Row.getCell(0,Row.RETURN_BLANK_AS_NULL);
			cell1 = Row.getCell(1,Row.RETURN_BLANK_AS_NULL);
			cell2 = Row.getCell(2,Row.RETURN_BLANK_AS_NULL);

			if (Cell == null) {
				Cell = Row.createCell(0);
				Cell.setCellValue(linktext[i-1]);
			}
			else
			{
				Cell.setCellValue(linktext[i-1]);
			}

			if (cell1 == null) {
				cell1 = Row.createCell(1);
				cell1.setCellValue(linkURL[i-1]);
			}
			else
			{
				cell1.setCellValue(linkURL[i-1]);
			}

			if (cell2 == null) {
				cell2 = Row.createCell(2);
				cell2.setCellValue(Result[i-1]);
			}
			else
			{
				cell2.setCellValue(Result[i-1]);
			}



		}
		// Constant variables Test Data path and Test Data file name
		FileOutputStream fileOut = new FileOutputStream(Constant.Path + TestData);
		ExcelWBook.write(fileOut);
		//			fileOut.flush();
		//			fileOut.close();
	}

	public static int getRowContains(String sTestCaseName, int colNum) throws Exception{
		int i;

		int rowCount = ExcelUtils.getRowUsed();
		for ( i=0 ; i<rowCount; i++){
			if  (ExcelUtils.getCellData(i,colNum).equalsIgnoreCase(sTestCaseName)){
				break;
			}
		}
		return i;
	}

	@SuppressWarnings("static-access")
	public static String getCellData(int RowNum, int ColNum) throws Exception{

		Cell = ExcelWSheet.getRow(RowNum).getCell(ColNum);
		if(Cell.getCellType() == Cell.CELL_TYPE_NUMERIC) 
		{
			Double CellData = Cell.getNumericCellValue();
			Integer CellValue = CellData.intValue();
			return CellValue.toString();	
		}
		else{
			String CellData = Cell.getStringCellValue();
			return CellData;
		}
	}

	public static int getRowUsed() throws Exception {

		int RowCount = ExcelWSheet.getLastRowNum();
		return RowCount+1;
	}

	public static void takeScreenshot(WebDriver driver, String sTestCaseName) throws Exception{

		File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
		FileUtils.copyFile(scrFile, new File(Constant.PathScreenShot + sTestCaseName +".jpg"));	
	}

	public static String changeDateFormate(String oldDate, String oldFormate,
			String newFormate) {
		String newDate = "";

		try {
			final String OLD_FORMAT = oldFormate;
			final String NEW_FORMAT = newFormate;
			SimpleDateFormat sdf = new SimpleDateFormat(OLD_FORMAT);
			Date d = sdf.parse(oldDate);
			sdf.applyPattern(NEW_FORMAT);
			newDate = sdf.format(d);
			System.out.println(newDate);

		} catch (ParseException e) {
			e.printStackTrace();

		}
		return newDate;
	}


	public static String changeDateFormate(String oldDate) {
		String newDate = "";

		try {
			if (!oldDate.contains("-")) {
				final String OLD_FORMAT = "dd/mm/yyyy";
				final String NEW_FORMAT = "dd-mm-yyyy";
				SimpleDateFormat sdf = new SimpleDateFormat(OLD_FORMAT);
				Date d = sdf.parse(oldDate);
				sdf.applyPattern(NEW_FORMAT);
				newDate = sdf.format(d);
				System.out.println(newDate);
			} else {
				newDate = oldDate;
			}
		} catch (ParseException e) {
			e.printStackTrace();

		}
		return newDate;
	}

	public static int compareTwoDate(String firstDate, String secondDate) {
		//	public static int compareTwoDate(String firstDate, String secondDate) {
		int value = 0;
		try {

			SimpleDateFormat sdf = new SimpleDateFormat("dd MMMM YYYY");
			SimpleDateFormat sdf1 = new SimpleDateFormat("MMMM dd YYYY");
			Date date1 = sdf.parse(firstDate);
			Date date2 = sdf1.parse(secondDate);
			if (date1.compareTo(date2) > 0) {
				System.out.println("Date1 is greater then Date2");
				value = 1;
			} else if (date1.compareTo(date2) < 0) {
				System.out.println("Date1 is less then Date2");
				value = -1;
			} else if (date1.compareTo(date2) == 0) {
				System.out.println("Date1 is equal to Date2");
				value = 0;
			}

		} catch (ParseException ex) {
			ex.printStackTrace();
		}

		return value;
	}

	public static void appendCellData(String time, String total,int ColNum,int Column1 ) throws Exception    
	{
		try 
		{
			int rowNum  = ExcelWSheet.getLastRowNum()+1;
			Row = ExcelWSheet.createRow(rowNum ++);
			Cell  = Row.createCell(ColNum);
			cell1 = Row.createCell(Column1);
			Cell.setCellValue(time);
			cell1.setCellValue(total);
			FileOutputStream fileOut = new FileOutputStream( Constant.File_PathArtical );
			ExcelWBook.write(fileOut);
			fileOut.flush();
			fileOut.close();
		}
		catch(Exception e)
		{
			throw (e);
		}
	}

}
